import javafx.util.Pair;
import java.util.ArrayList;

/**
 * The mapper class takes a chunk of input (lines)
 */
class Mapper {
    private final ArrayList<String> singleChunk;//chunk of input (lines)
    private final Logger logger = new Logger();
    private final Context context = new Context(); //each mapper has a context to write to
    private final Class mapperClass; //user-defined mapper class

    /**
     * Mapper is initialised with a chunk of lines and the designated mapper class
     */
    Mapper(ArrayList<String> chunk, Class mapperClass){
        this.singleChunk = chunk;
        this.mapperClass = mapperClass;
    }

    /**
     * This method returns the list of key-value pairs generated by the mapper, from the context object that was written to
     */
    ArrayList<Pair<Object, Object>> getIntermediateOutput(){
        return context.getMap();
    }

    /**
     * The run method calls map() for every line in its chunk of input
     * It finds the declared constructor of the map class which accepts a string and a context object
     * A new instance of the class is then created with a line from the chunk and the mapper's context to be written to
     */
    @SuppressWarnings("unchecked")
    void run(){
        if (mapperClass != null) {//if the mapper class is declared
            for (String line : singleChunk) {//iterate over all lines in the chunk
                try {
                    mapperClass.getDeclaredConstructor(String.class, Context.class).newInstance(line, context);//create new instance of map() with line and context
                } catch (Exception e) {
                    logger.logCritical("Error: " + e.getMessage() + " cause: " + e.getCause());//log error and stop program
                }
            }
        }else{//print error is mapper class not set
            logger.logCritical("Mapper method 'map' not defined\n" +
                    "use config.setMapper(class);");
        }
    }
}